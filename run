#!/usr/bin/env bash

# Color definitions for consistent and attractive UI elements
BOLD='\033[1m'
DIM='\033[2m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'
BLINK='\033[5m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
LIGHT_GRAY='\033[0;37m'
DARK_GRAY='\033[1;30m'
BRIGHT_RED='\033[91m'
BRIGHT_GREEN='\033[92m'
BRIGHT_YELLOW='\033[93m'
BRIGHT_BLUE='\033[94m'
BRIGHT_PURPLE='\033[95m'
BRIGHT_CYAN='\033[96m'
NC='\033[0m'

# Configuration variables
VERSION="1.0.0"
INSTALL_DIR="/usr/bin"
LOG_FILE="/tmp/fetch_install_$(date +%Y%m%d_%H%M%S).log"
TERM_WIDTH=$(tput cols 2>/dev/null || echo 80)
CURRENT_USER=${SUDO_USER:-$USER}
USER_HOME=$(getent passwd $CURRENT_USER 2>/dev/null | cut -d: -f6 || echo $HOME)
ZSH_CUSTOM="$USER_HOME/.oh-my-zsh/custom"
FETCH_SOURCE=".src/fetch.c"

# Enhanced display functions with better animations
print_animated_border() {
    local char="$1"
    local color="$2"
    local delay="$3"
    
    echo -ne "$color"
    for (( i=0; i<$TERM_WIDTH; i++ )); do
        echo -ne "$char"
        sleep $delay
    done
    echo -e "$NC"
}

# Enhanced banner with gradient effect
print_banner() {
    clear
    echo
    
    # Top border with animation
    print_animated_border "‚ïê" "$BRIGHT_CYAN" 0.005
    
    echo -e "${BOLD}${BRIGHT_BLUE}"
    echo '    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'
    echo '    ‚ïë                                                       ‚ïë'
    echo '    ‚ïë        üöÄ FETCH TOOLS INSTALLER üöÄ                   ‚ïë'
    echo '    ‚ïë                                                       ‚ïë'
    echo '    ‚ïë         System Info Display Suite                     ‚ïë'
    echo '    ‚ïë                                                       ‚ïë'
    echo '    ‚ïë            by 0xb0rn3 | 0xbv1                        ‚ïë'
    echo '    ‚ïë                                                       ‚ïë'
    echo '    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'
    echo -e "${NC}"
    
    echo -e "${BOLD}${BRIGHT_PURPLE}                 ‚ú® Setup & Configuration Tool ‚ú®${NC}"
    echo -e "${DIM}${BRIGHT_CYAN}                    Version $VERSION - LATEST${NC}"
    
    # Bottom border with animation
    print_animated_border "‚ïê" "$BRIGHT_CYAN" 0.005
    echo
}

# Enhanced status messages with better icons
print_status() {
    local text="$1"
    local status="$2"
    local icon=""
    local color=""
    
    case $status in
        "OK")     icon="‚úÖ"; color="${BRIGHT_GREEN}" ;;
        "FAIL")   icon="‚ùå"; color="${BRIGHT_RED}" ;;
        "WARN")   icon="‚ö†Ô∏è "; color="${BRIGHT_YELLOW}" ;;
        "INFO")   icon="‚ÑπÔ∏è "; color="${BRIGHT_BLUE}" ;;
        "SKIP")   icon="‚è≠Ô∏è "; color="${GRAY}" ;;
        "SUDO")   icon="üîê"; color="${BRIGHT_PURPLE}" ;;
        "DETECT") icon="üîç"; color="${BRIGHT_CYAN}" ;;
        *)        icon="‚ö°"; color="${BRIGHT_PURPLE}" ;;
    esac
    
    printf "${ITALIC}${WHITE}%-45s${NC}" "$text"
    echo -e "${color}${icon} ${status}${NC}"
}

# Enhanced section headers with better styling
print_section() {
    local text="$1"
    local padding=$(( (60 - ${#text}) / 2 ))
    
    echo -e "\n${BOLD}${BRIGHT_CYAN}‚ï≠$(printf '%*s' $padding | tr ' ' '‚îÄ')‚îÄ ${text} ‚îÄ$(printf '%*s' $padding | tr ' ' '‚îÄ')‚ïÆ${NC}"
}

# Enhanced progress spinner with more animations
show_spinner() {
    local pid=$1
    local text="$2"
    local frames=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
    local delay=0.1
    local i=0
    
    while kill -0 $pid 2>/dev/null; do
        printf "\r${ITALIC}${WHITE}%-45s${NC} ${BRIGHT_BLUE}${frames[i]}${NC} ${DIM}Working...${NC}"
        i=$(( (i + 1) % ${#frames[@]} ))
        sleep $delay
    done
    printf "\r${ITALIC}${WHITE}%-45s${NC} ${BRIGHT_GREEN}‚úÖ Complete${NC}\n"
}

# Enhanced sudo check with automatic elevation
check_and_elevate_sudo() {
    print_section "üîê Privilege Verification"
    
    if [ "$EUID" -eq 0 ]; then
        if [ -z "$SUDO_USER" ]; then
            print_status "Root Detection" "WARN"
            echo -e "${BRIGHT_YELLOW}‚ö†Ô∏è  Running as root without sudo is not recommended!${NC}"
            echo -e "${BRIGHT_CYAN}üí° For safety, please run with: ${BOLD}sudo $0${NC}"
            echo -e "${BRIGHT_RED}‚ùå Exiting for security reasons...${NC}"
            exit 1
        else
            print_status "Sudo Privileges" "OK"
            print_status "Original User" "DETECT"
            echo -e "${DIM}   Running as: ${BRIGHT_GREEN}$SUDO_USER${NC}"
            return 0
        fi
    fi
    
    # Not running as root, need to elevate
    print_status "Current User" "INFO"
    echo -e "${DIM}   Running as: ${BRIGHT_YELLOW}$USER${NC}"
    
    print_status "Privilege Level" "WARN"
    echo -e "${BRIGHT_YELLOW}‚ö†Ô∏è  This installer requires sudo privileges${NC}"
    echo -e "${BRIGHT_CYAN}üí° Attempting to elevate privileges...${NC}"
    echo
    
    # Check if sudo is available
    if ! command -v sudo >/dev/null 2>&1; then
        print_status "Sudo Command" "FAIL"
        echo -e "${BRIGHT_RED}‚ùå sudo command not found!${NC}"
        echo -e "${BRIGHT_CYAN}üí° Please install sudo or run as root${NC}"
        exit 1
    fi
    
    # Check if user is in sudoers
    if ! sudo -n true 2>/dev/null; then
        print_status "Sudo Access" "SUDO"
        echo -e "${BRIGHT_PURPLE}üîê Please enter your password to continue:${NC}"
        
        # Test sudo access
        if ! sudo -v; then
            print_status "Authentication" "FAIL"
            echo -e "${BRIGHT_RED}‚ùå Authentication failed or insufficient privileges${NC}"
            echo -e "${BRIGHT_CYAN}üí° Please ensure you have sudo access${NC}"
            exit 1
        fi
    fi
    
    print_status "Sudo Verification" "OK"
    echo -e "${BRIGHT_GREEN}‚úÖ Privileges verified, re-executing with sudo...${NC}"
    echo
    
    # Re-execute script with sudo
    exec sudo "$0" "$@"
}

# Enhanced OS detection with better formatting
detect_os() {
    print_section "üñ•Ô∏è  System Detection"
    
    # Get system information
    local os_name=$(uname -s)
    local os_version=$(uname -r)
    local architecture=$(uname -m)
    
    print_status "Operating System" "DETECT"
    echo -e "${DIM}   Kernel: ${BRIGHT_CYAN}$os_name $os_version${NC}"
    echo -e "${DIM}   Architecture: ${BRIGHT_CYAN}$architecture${NC}"
    
    if [ -f "/etc/debian_version" ]; then
        PM="apt-get"
        PM_INSTALL="$PM install -y"
        PM_UPDATE="$PM update"
        REQUIRED_PACKAGES="build-essential gcc make zsh git fonts-noto-color-emoji ttf-hanazono curl"
        OS="Debian"
        local distro=$(lsb_release -d 2>/dev/null | cut -f2 || cat /etc/debian_version)
    elif [ -f "/etc/arch-release" ]; then
        PM="pacman"
        PM_INSTALL="$PM -S --noconfirm"
        PM_UPDATE="$PM -Sy"
        REQUIRED_PACKAGES="base-devel gcc make zsh noto-fonts-emoji ttf-hanazono git curl"
        OS="Arch"
        local distro=$(cat /etc/arch-release 2>/dev/null || echo "Arch Linux")
    elif [ -f "/etc/redhat-release" ]; then
        PM="dnf"
        PM_INSTALL="$PM install -y"
        PM_UPDATE="$PM update -y"
        REQUIRED_PACKAGES="gcc gcc-c++ make ttf-hanazono zsh git curl"
        OS="RedHat"
        local distro=$(cat /etc/redhat-release 2>/dev/null || echo "Red Hat Linux")
    else
        print_status "Distribution" "FAIL"
        echo -e "${BRIGHT_RED}‚ùå Unsupported Linux distribution${NC}"
        echo -e "${BRIGHT_CYAN}üí° This installer supports: Debian, Ubuntu, Arch, Red Hat${NC}"
        exit 1
    fi
    
    print_status "Distribution" "OK"
    echo -e "${DIM}   Detected: ${BRIGHT_GREEN}$distro${NC}"
    print_status "Package Manager" "DETECT"
    echo -e "${DIM}   Using: ${BRIGHT_CYAN}$PM${NC}"
}

# Check if a package is installed
is_package_installed() {
    local package=$1
    case $OS in
        "Debian")
            dpkg -l | grep -q " $package "
            ;;
        "Arch")
            pacman -Q $package &> /dev/null
            ;;
        "RedHat")
            rpm -q $package &> /dev/null
            ;;
    esac
}

# Enhanced dependency installation with better progress
install_dependencies() {
    print_section "üì¶ Installing Dependencies"
    
    echo -e "${BRIGHT_CYAN}üîÑ Updating package database...${NC}"
    ($PM_UPDATE >/dev/null 2>&1) &
    show_spinner $! "Updating package manager"
    
    local installed_count=0
    local skipped_count=0
    local total_packages=$(echo $REQUIRED_PACKAGES | wc -w)
    
    for package in $REQUIRED_PACKAGES; do
        if is_package_installed $package; then
            print_status "$package" "SKIP"
            ((skipped_count++))
        else
            echo -e "${BRIGHT_BLUE}üì• Installing $package...${NC}"
            ($PM_INSTALL $package >/dev/null 2>&1) &
            show_spinner $! "Installing $package"
            ((installed_count++))
        fi
    done
    
    echo -e "\n${BRIGHT_GREEN}üìä Installation Summary:${NC}"
    echo -e "${DIM}   Total packages: ${BRIGHT_CYAN}$total_packages${NC}"
    echo -e "${DIM}   Installed: ${BRIGHT_GREEN}$installed_count${NC}"
    echo -e "${DIM}   Skipped: ${BRIGHT_YELLOW}$skipped_count${NC}"
}

# Enhanced compilation with better error handling
compile_and_install_fetch() {
    print_section "üî® Compiling Fetch Tool"
    
    if [ ! -f "$FETCH_SOURCE" ]; then
        print_status "Source File" "FAIL"
        echo -e "${BRIGHT_RED}‚ùå fetch.c not found at $FETCH_SOURCE${NC}"
        echo -e "${BRIGHT_CYAN}üí° Please ensure the source file exists${NC}"
        exit 1
    fi
    
    print_status "Source File" "OK"
    echo -e "${DIM}   Location: ${BRIGHT_CYAN}$FETCH_SOURCE${NC}"
    
    # Compile fetch.c
    echo -e "${BRIGHT_BLUE}üîß Compiling fetch.c...${NC}"
    (gcc -o fetch "$FETCH_SOURCE" >/dev/null 2>&1) &
    show_spinner $! "Compiling fetch binary"
    
    if [ $? -ne 0 ]; then
        print_status "Compilation" "FAIL"
        echo -e "${BRIGHT_RED}‚ùå Failed to compile fetch.c${NC}"
        echo -e "${BRIGHT_CYAN}üí° Check if gcc and build tools are installed${NC}"
        exit 1
    fi
    
    print_status "Compilation" "OK"
    
    # Install fetch binary
    echo -e "${BRIGHT_BLUE}üì• Installing fetch binary...${NC}"
    (install -m 755 fetch "$INSTALL_DIR/fetch" >/dev/null 2>&1) &
    show_spinner $! "Installing fetch binary"
    
    if [ $? -ne 0 ]; then
        print_status "Installation" "FAIL"
        echo -e "${BRIGHT_RED}‚ùå Failed to install fetch binary${NC}"
        echo -e "${BRIGHT_CYAN}üí° Check write permissions to $INSTALL_DIR${NC}"
        exit 1
    fi
    
    print_status "Installation" "OK"
    echo -e "${DIM}   Installed to: ${BRIGHT_GREEN}$INSTALL_DIR/fetch${NC}"
    
    # Cleanup compiled binary
    rm -f fetch
}

# Install Oh My Zsh framework
install_oh_my_zsh() {
    print_section "üêö Installing Oh My Zsh"
    
    if [ -d "$USER_HOME/.oh-my-zsh" ]; then
        print_status "Oh My Zsh" "SKIP"
        echo -e "${DIM}   Already installed${NC}"
        return 0
    fi

    echo -e "${BRIGHT_BLUE}üì• Downloading Oh My Zsh...${NC}"
    (sudo -u $CURRENT_USER sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended >/dev/null 2>&1) &
    show_spinner $! "Installing Oh My Zsh"
    print_status "Oh My Zsh Setup" "OK"
    echo -e "${DIM}   Location: ${BRIGHT_GREEN}$USER_HOME/.oh-my-zsh${NC}"
}

# Install Zsh plugins
install_zsh_plugins() {
    print_section "üîå Installing ZSH Plugins"
    
    local plugins=(
        "zsh-syntax-highlighting;https://github.com/zsh-users/zsh-syntax-highlighting.git"
        "zsh-autosuggestions;https://github.com/zsh-users/zsh-autosuggestions.git"
    )
    
    for plugin in "${plugins[@]}"; do
        IFS=';' read -r name url <<< "$plugin"
        local plugin_dir="$ZSH_CUSTOM/plugins/$name"
        
        if [ -d "$plugin_dir" ]; then
            print_status "$name" "SKIP"
        else
            echo -e "${BRIGHT_BLUE}üì• Installing $name...${NC}"
            (sudo -u $CURRENT_USER git clone --depth=1 "$url" "$plugin_dir" >/dev/null 2>&1) &
            show_spinner $! "Installing $name"
        fi
    done
}

# Install ble.sh for Bash using the quick install method
install_blesh() {
    print_section "üêö Installing ble.sh for Bash"
    
    local blesh_dir="$USER_HOME/.local/share/blesh"
    
    if [ -d "$blesh_dir" ]; then
        print_status "ble.sh" "SKIP"
        echo -e "${DIM}   Already installed${NC}"
        return 0
    fi
    
    echo -e "${BRIGHT_BLUE}üì• Downloading ble.sh...${NC}"
    (
        cd "$USER_HOME"
        sudo -u $CURRENT_USER git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git >/dev/null 2>&1
        cd ble.sh
        sudo -u $CURRENT_USER make install PREFIX="$USER_HOME/.local" >/dev/null 2>&1
        rm -rf "$USER_HOME/ble.sh"
    ) &
    show_spinner $! "Installing ble.sh"
    
    if [ -d "$blesh_dir" ]; then
        print_status "ble.sh Setup" "OK"
        echo -e "${DIM}   Location: ${BRIGHT_GREEN}$blesh_dir${NC}"
    else
        print_status "ble.sh Setup" "FAIL"
    fi
}

# Configure Zsh settings
configure_zsh() {
    print_section "‚öôÔ∏è  Configuring ZSH"
    
    local zshrc="$USER_HOME/.zshrc"
    
    if [ -f "$zshrc" ]; then
        local backup_file="$zshrc.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$zshrc" "$backup_file"
        print_status "Backup Created" "OK"
        echo -e "${DIM}   Backup: ${BRIGHT_YELLOW}$backup_file${NC}"
    fi
    
    cat .templates/zshrc.template > "$zshrc"
    
    # Add fetch to zshrc
    echo -e "\n# Fetch tool display" >> "$zshrc"
    echo "command -v fetch >/dev/null && fetch" >> "$zshrc"
    
    chown $CURRENT_USER:$CURRENT_USER "$zshrc"
    chmod 644 "$zshrc"
    
    print_status "ZSH Configuration" "OK"
    echo -e "${DIM}   Config: ${BRIGHT_GREEN}$zshrc${NC}"
}

# Configure Bash settings
configure_bash() {
    print_section "‚öôÔ∏è  Configuring BASH"
    
    local bashrc="$USER_HOME/.bashrc"
    
    if [ -f "$bashrc" ]; then
        local backup_file="$bashrc.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$bashrc" "$backup_file"
        print_status "Backup Created" "OK"
        echo -e "${DIM}   Backup: ${BRIGHT_YELLOW}$backup_file${NC}"
    fi
    
    cat .templates/bashrc.template > "$bashrc"
    
    # Add ble.sh to bashrc if installed
    if [ -d "$USER_HOME/.local/share/blesh" ]; then
        echo -e "\n# Load ble.sh for enhanced bash experience" >> "$bashrc"
        echo "source $USER_HOME/.local/share/blesh/ble.sh" >> "$bashrc"
    fi
    
    # Add fetch to bashrc
    echo -e "\n# Fetch tool display" >> "$bashrc"
    echo "command -v fetch >/dev/null && fetch" >> "$bashrc"
    
    chown $CURRENT_USER:$CURRENT_USER "$bashrc"
    chmod 644 "$bashrc"
    
    print_status "BASH Configuration" "OK"
    echo -e "${DIM}   Config: ${BRIGHT_GREEN}$bashrc${NC}"
}

# Enhanced shell changing functionality
change_shell() {
    print_section "üêö Shell Configuration"
    
    if [ "$SHELL_CHOICE" != "zsh" ]; then
        print_status "Shell Change" "SKIP"
        echo -e "${DIM}   Configuring for Bash, no shell change needed${NC}"
        return 0
    fi
    
    local current_shell=$(getent passwd $CURRENT_USER | cut -d: -f7)
    local zsh_path=$(which zsh)
    
    if [ "$current_shell" = "$zsh_path" ]; then
        print_status "Current Shell" "SKIP"
        echo -e "${DIM}   Already using Zsh${NC}"
        return 0
    fi
    
    print_status "Current Shell" "DETECT"
    echo -e "${DIM}   Current: ${BRIGHT_YELLOW}$current_shell${NC}"
    echo -e "${DIM}   Available: ${BRIGHT_CYAN}$zsh_path${NC}"
    
    if [ ! -f "$zsh_path" ]; then
        print_status "Zsh Installation" "FAIL"
        echo -e "${BRIGHT_RED}‚ùå Zsh not found${NC}"
        return 1
    fi
    
    if ! grep -q "^$zsh_path\$" /etc/shells; then
        echo -e "${BRIGHT_BLUE}üìù Adding Zsh to /etc/shells...${NC}"
        echo "$zsh_path" >> /etc/shells
    fi
    
    echo -e "\n${BRIGHT_CYAN}ü§î Would you like to change your default shell to Zsh? ${BOLD}[y/N]${NC}"
    read -r -n 1 change_shell_choice
    echo
    
    if [[ "$change_shell_choice" =~ ^[Yy]$ ]]; then
        echo -e "${BRIGHT_BLUE}üîÑ Changing default shell...${NC}"
        (chsh -s "$zsh_path" $CURRENT_USER >/dev/null 2>&1) &
        show_spinner $! "Changing default shell"
        
        if [ $? -eq 0 ]; then
            print_status "Shell Change" "OK"
            echo -e "${BRIGHT_GREEN}‚úÖ Shell successfully changed to Zsh${NC}"
        else
            print_status "Shell Change" "FAIL"
            echo -e "${BRIGHT_RED}‚ùå Failed to change shell${NC}"
        fi
    else
        print_status "Shell Change" "SKIP"
    fi
}

# Clean up temporary files
cleanup() {
    print_section "üßπ Cleanup"
    (rm -f fetch) &
    show_spinner $! "Removing temporary files"
    print_status "Cleanup" "OK"
}

# Enhanced completion message
print_completion() {
    echo -e "\n${BOLD}${BRIGHT_GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BOLD}${BRIGHT_GREEN}‚ïë                                                          ‚ïë${NC}"
    echo -e "${BOLD}${BRIGHT_GREEN}‚ïë           üéâ INSTALLATION COMPLETE! üéâ                  ‚ïë${NC}"
    echo -e "${BOLD}${BRIGHT_GREEN}‚ïë                                                          ‚ïë${NC}"
    echo -e "${BOLD}${BRIGHT_GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    
    echo -e "\n${BOLD}${BRIGHT_WHITE}üìã Available Commands:${NC}"
    echo -e "  ${BRIGHT_CYAN}fetch${NC}         - Modern system info display"
    echo
    echo -e "${BOLD}${BRIGHT_WHITE}üìç Installation Locations:${NC}"
    echo -e "  ${DIM}Binary:${NC} ${BRIGHT_GREEN}$INSTALL_DIR/fetch${NC}"
    if [ "$SHELL_CHOICE" = "zsh" ]; then
        echo -e "  ${DIM}ZSH Config:${NC} ${BRIGHT_GREEN}$USER_HOME/.zshrc${NC}"
    else
        echo -e "  ${DIM}BASH Config:${NC} ${BRIGHT_GREEN}$USER_HOME/.bashrc${NC}"
    fi
    if [ -d "$USER_HOME/.local/share/blesh" ]; then
        echo -e "  ${DIM}ble.sh:${NC} ${BRIGHT_GREEN}$USER_HOME/.local/share/blesh${NC}"
    fi
    echo -e "  ${DIM}Log file:${NC} ${BRIGHT_YELLOW}$LOG_FILE${NC}"
    echo
    echo -e "${BOLD}${BRIGHT_YELLOW}üîÑ Please log out and log back in to apply all changes${NC}"
    echo -e "${BOLD}${BRIGHT_CYAN}üí° Or run: ${BRIGHT_WHITE}source ~/.$(basename $SHELL)rc${NC}"
    echo
}

# Main execution flow
main() {
    print_banner
    check_and_elevate_sudo
    detect_os
    
    # Enhanced shell selection
    echo -e "${BRIGHT_CYAN}üêö Select the shell to configure:${NC}"
    echo -e "  ${BOLD}1)${NC} ${BRIGHT_GREEN}Bash${NC} ${DIM}(with ble.sh enhancement)${NC}"
    echo -e "  ${BOLD}2)${NC} ${BRIGHT_BLUE}Zsh${NC} ${DIM}(with Oh My Zsh framework)${NC}"
    echo
    echo -ne "${BRIGHT_CYAN}Enter your choice ${BOLD}[1-2]${NC}: "
    read -r shell_choice
    
    case $shell_choice in
        1)
            SHELL_CHOICE="bash"
            print_status "Shell Selection" "OK"
            echo -e "${DIM}   Selected: ${BRIGHT_GREEN}Bash with ble.sh${NC}"
            ;;
        2)
            SHELL_CHOICE="zsh"
            print_status "Shell Selection" "OK"
            echo -e "${DIM}   Selected: ${BRIGHT_BLUE}Zsh with Oh My Zsh${NC}"
            ;;
        *)
            print_status "Shell Selection" "FAIL"
            echo -e "${BRIGHT_RED}‚ùå Invalid choice. Please run the installer again.${NC}"
            exit 1
            ;;
    esac
    
    install_dependencies
    compile_and_install_fetch
    
    if [ "$SHELL_CHOICE" = "zsh" ]; then
        install_oh_my_zsh
        install_zsh_plugins
        configure_zsh
        change_shell
    else
        install_blesh
        configure_bash
    fi
    
    cleanup
    print_completion
}

# Enhanced script execution with better error handling
{
    main "$@"
} 2>&1 | tee -a "$LOG_FILE"

if [ $? -eq 0 ]; then
    clear
    echo -e "${BRIGHT_GREEN}üéâ Installation completed successfully!${NC}"
    echo -e "${BRIGHT_YELLOW}üîÑ Please log out and log back in to see the changes.${NC}"
    sleep 3
else
    echo -e "${BRIGHT_RED}‚ùå Installation encountered issues. Check log: $LOG_FILE${NC}"
    exit 1
fi
