#!/usr/bin/env bash

# Color definitions for consistent and attractive UI elements
BOLD='\033[1m'
DIM='\033[2m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m'

# Configuration variables
VERSION="1.0.0"
INSTALL_DIR="/usr/bin"
LOG_FILE="/tmp/fetch_install_$(date +%Y%m%d_%H%M%S).log"
TERM_WIDTH=$(tput cols)
CURRENT_USER=$SUDO_USER
USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)
ZSH_CUSTOM="$USER_HOME/.oh-my-zsh/custom"
FETCH_SOURCE=".src/fetch.c"

# Display the application banner with rounded corners
print_banner() {
    clear
    echo
    printf "%${TERM_WIDTH}s\n" | tr ' ' '─'
    echo -e "${BOLD}${BLUE}"
    echo '╭───────────────────────────────╮'
    echo '│       FETCH TOOLS             │'
    echo '│  System Info Display Suite    │'
    echo '│      by 0xb0rn3 | 0xbv1       │'
    echo '╰───────────────────────────────╯'
    echo -e "${NC}"
    echo -e "${BOLD}${PURPLE}    Setup & Configuration Tool${NC}"
    echo -e "${DIM}       Version $VERSION - LATEST${NC}"
    printf "%${TERM_WIDTH}s\n" | tr ' ' '─'
    echo
}

# Print formatted status messages
print_status() {
    local text="$1"
    local status="$2"
    printf "${ITALIC}%-45s" "$text"
    case $status in
        "OK")     echo -e "${GREEN}✓ Done${NC}" ;;
        "FAIL")   echo -e "${RED}✗ Failed${NC}" ;;
        "WARN")   echo -e "${YELLOW}⚠ Warning${NC}" ;;
        "INFO")   echo -e "${BLUE}ℹ Info${NC}" ;;
        "SKIP")   echo -e "${GRAY}⏭ Skipped${NC}" ;;
        *)        echo -e "${PURPLE}⋯ $status${NC}" ;;
    esac
}

# Display section headers with minimal design
print_section() {
    local text="$1"
    echo -e "\n${BOLD}${CYAN}╭─ ${text} ─╮${NC}"
}

# Show progress spinner animation
show_spinner() {
    local pid=$1
    local text="$2"
    local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    local i=0
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i + 1) % 10 ))
        printf "\r${ITALIC}%-45s${NC} ${BLUE}${spin:$i:1}${NC}" "$text"
        sleep .1
    done
    printf "\r%-45s${GREEN}✓${NC}\n" "$text"
}

# Verify root privileges
check_root() {
    if [ "$EUID" -ne 0 ]; then
        print_status "Root Privileges" "FAIL"
        echo -e "${RED}Please run with sudo privileges${NC}"
        exit 1
    fi
    if [ -z "$SUDO_USER" ]; then
        print_status "User Detection" "FAIL"
        echo -e "${RED}Please run with sudo, not as root${NC}"
        exit 1
    fi
    print_status "Privilege Check" "OK"
}

# Detect operating system and set package manager
detect_os() {
    print_section "System Detection"
    
    if [ -f "/etc/debian_version" ]; then
        PM="apt-get"
        PM_INSTALL="$PM install -y"
        PM_UPDATE="$PM update"
        REQUIRED_PACKAGES="build-essential gcc make zsh git fonts-noto-color-emoji ttf-hanazono curl"
        OS="Debian"
    elif [ -f "/etc/arch-release" ]; then
        PM="pacman"
        PM_INSTALL="$PM -S --noconfirm"
        PM_UPDATE="$PM -Sy"
        REQUIRED_PACKAGES="base-devel gcc make zsh noto-fonts-emoji ttf-hanazono git curl"
        OS="Arch"
    elif [ -f "/etc/redhat-release" ]; then
        PM="dnf"
        PM_INSTALL="$PM install -y"
        PM_UPDATE="$PM update -y"
        REQUIRED_PACKAGES="gcc gcc-c++ make ttf-hanazono zsh git curl"
        OS="RedHat"
    else
        print_status "OS Detection" "FAIL"
        echo -e "${RED}Unsupported distribution${NC}"
        exit 1
    fi
    
    print_status "OS Detection" "OK"
    echo -e "${DIM}Detected: $OS Linux${NC}"
}

# Check if a package is installed
is_package_installed() {
    local package=$1
    case $OS in
        "Debian")
            dpkg -l | grep -q " $package "
            ;;
        "Arch")
            pacman -Q $package &> /dev/null
            ;;
        "RedHat")
            rpm -q $package &> /dev/null
            ;;
    esac
}

# Install required dependencies only if not already installed
install_dependencies() {
    print_section "Installing Dependencies"
    
    echo -e "${DIM}Updating package database...${NC}"
    ($PM_UPDATE >/dev/null 2>&1) &
    show_spinner $! "Updating package manager"
    
    for package in $REQUIRED_PACKAGES; do
        if is_package_installed $package; then
            print_status "$package" "SKIP"
        else
            echo -e "${DIM}Installing $package...${NC}"
            ($PM_INSTALL $package >/dev/null 2>&1) &
            show_spinner $! "Installing $package"
        fi
    done
}

# Compile fetch.c and install
compile_and_install_fetch() {
    print_section "Compiling Fetch Tool"
    
    if [ ! -f "$FETCH_SOURCE" ]; then
        print_status "Fetch Source" "FAIL"
        echo -e "${RED}fetch.c not found at $FETCH_SOURCE${NC}"
        exit 1
    fi
    
    print_status "Fetch Source" "OK"
    
    # Compile fetch.c
    echo -e "${DIM}Compiling fetch.c...${NC}"
    (gcc -o fetch "$FETCH_SOURCE" >/dev/null 2>&1) &
    show_spinner $! "Compiling fetch binary"
    
    if [ $? -ne 0 ]; then
        print_status "Compilation" "FAIL"
        echo -e "${RED}Failed to compile fetch.c${NC}"
        exit 1
    fi
    
    print_status "Compilation" "OK"
    
    # Install fetch binary
    echo -e "${DIM}Installing fetch binary...${NC}"
    (install -m 755 fetch "$INSTALL_DIR/fetch" >/dev/null 2>&1) &
    show_spinner $! "Installing fetch binary"
    
    if [ $? -ne 0 ]; then
        print_status "Installation" "FAIL"
        echo -e "${RED}Failed to install fetch binary${NC}"
        exit 1
    fi
    
    print_status "Installation" "OK"
    
    # Cleanup compiled binary
    rm -f fetch
}

# Install Oh My Zsh framework
install_oh_my_zsh() {
    print_section "Installing Oh My Zsh"
    
    if [ -d "$USER_HOME/.oh-my-zsh" ]; then
        print_status "Oh My Zsh" "SKIP"
        return 0
    fi

    (sudo -u $SUDO_USER sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended >/dev/null 2>&1) &
    show_spinner $! "Installing Oh My Zsh"
    print_status "Oh My Zsh Setup" "OK"
}

# Install Zsh plugins
install_zsh_plugins() {
    print_section "Installing ZSH Plugins"
    
    local plugins=(
        "zsh-syntax-highlighting;https://github.com/zsh-users/zsh-syntax-highlighting.git"
        "zsh-autosuggestions;https://github.com/zsh-users/zsh-autosuggestions.git"
    )
    
    for plugin in "${plugins[@]}"; do
        IFS=';' read -r name url <<< "$plugin"
        local plugin_dir="$ZSH_CUSTOM/plugins/$name"
        
        if [ -d "$plugin_dir" ]; then
            print_status "$name" "SKIP"
        else
            (sudo -u $SUDO_USER git clone --depth=1 "$url" "$plugin_dir" >/dev/null 2>&1) &
            show_spinner $! "Installing $name"
        fi
    done
}

# Install ble.sh for Bash using the quick install method
install_blesh() {
    print_section "Installing ble.sh for Bash"
    
    local blesh_dir="$USER_HOME/.local/share/blesh"
    
    if [ -d "$blesh_dir" ]; then
        print_status "ble.sh" "SKIP"
        return 0
    fi
    
    (
        cd "$USER_HOME"
        sudo -u $SUDO_USER git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git >/dev/null 2>&1
        cd ble.sh
        sudo -u $SUDO_USER make install PREFIX="$USER_HOME/.local" >/dev/null 2>&1
        rm -rf "$USER_HOME/ble.sh"
    ) &
    show_spinner $! "Installing ble.sh"
    
    if [ -d "$blesh_dir" ]; then
        print_status "ble.sh Setup" "OK"
    else
        print_status "ble.sh Setup" "FAIL"
    fi
}

# Configure Zsh settings
configure_zsh() {
    print_section "Configuring ZSH"
    
    local zshrc="$USER_HOME/.zshrc"
    
    if [ -f "$zshrc" ]; then
        cp "$zshrc" "$zshrc.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    cat .templates/zshrc.template > "$zshrc"
    
    # Add fetch to zshrc
    echo -e "\n# Fetch tool display" >> "$zshrc"
    echo "command -v fetch >/dev/null && fetch" >> "$zshrc"
    
    chown $SUDO_USER:$SUDO_USER "$zshrc"
    chmod 644 "$zshrc"
    
    print_status "ZSH Configuration" "OK"
}

# Configure Bash settings
configure_bash() {
    print_section "Configuring BASH"
    
    local bashrc="$USER_HOME/.bashrc"
    
    if [ -f "$bashrc" ]; then
        cp "$bashrc" "$bashrc.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    cat .templates/bashrc.template > "$bashrc"
    
    # Add ble.sh to bashrc if installed
    if [ -d "$USER_HOME/.local/share/blesh" ]; then
        echo -e "\n# Load ble.sh for enhanced bash experience" >> "$bashrc"
        echo "source $USER_HOME/.local/share/blesh/ble.sh" >> "$bashrc"
    fi
    
    # Add fetch to bashrc
    echo -e "\n# Fetch tool display" >> "$bashrc"
    echo "command -v fetch >/dev/null && fetch" >> "$bashrc"
    
    chown $SUDO_USER:$SUDO_USER "$bashrc"
    chmod 644 "$bashrc"
    
    print_status "BASH Configuration" "OK"
}

# Handle shell changing functionality
change_shell() {
    print_section "Shell Configuration"
    
    if [ "$SHELL_CHOICE" != "zsh" ]; then
        print_status "Shell Change" "SKIP"
        echo -e "${DIM}Configuring for Bash, no shell change needed.${NC}"
        return 0
    fi
    
    local current_shell=$(getent passwd $SUDO_USER | cut -d: -f7)
    local zsh_path=$(which zsh)
    
    if [ "$current_shell" = "$zsh_path" ]; then
        print_status "Current Shell" "SKIP"
        echo -e "${DIM}Already using Zsh${NC}"
        return 0
    fi
    
    echo -e "${CYAN}Current shell: ${GRAY}$current_shell${NC}"
    echo -e "${CYAN}Available shell: ${GRAY}$zsh_path${NC}\n"
    
    if [ ! -f "$zsh_path" ]; then
        print_status "Zsh Installation" "FAIL"
        echo -e "${RED}Zsh not found. Please install Zsh first.${NC}"
        return 1
    fi
    
    if ! grep -q "^$zsh_path\$" /etc/shells; then
        echo -e "${DIM}Adding Zsh to /etc/shells...${NC}"
        echo "$zsh_path" >> /etc/shells
    fi
    
    echo -e "${CYAN}Would you like to change your default shell to Zsh? [y/N]${NC}"
    read -r -n 1 change_shell_choice
    echo
    
    if [[ "$change_shell_choice" =~ ^[Yy]$ ]]; then
        (chsh -s "$zsh_path" $SUDO_USER >/dev/null 2>&1) &
        show_spinner $! "Changing default shell"
        
        if [ $? -eq 0 ]; then
            print_status "Shell Change" "OK"
            echo -e "${GREEN}✓ Shell successfully changed to Zsh${NC}"
        else
            print_status "Shell Change" "FAIL"
            echo -e "${RED}✗ Failed to change shell${NC}"
        fi
    else
        print_status "Shell Change" "SKIP"
    fi
}

# Clean up temporary files
cleanup() {
    print_section "Cleanup"
    (rm -f fetch) &
    show_spinner $! "Removing temporary files"
    print_status "Cleanup" "OK"
}

# Display completion message
print_completion() {
    echo -e "\n${BOLD}${GREEN}╭─ Installation Complete! ─╮${NC}"
    echo -e "${BOLD}${WHITE}Available commands:${NC}"
    echo -e "  ${CYAN}fetch${NC}         - Modern system info display"
    echo
    echo -e "${BOLD}${WHITE}Locations:${NC}"
    echo -e "  ${DIM}Installation:${NC} $INSTALL_DIR"
    if [ "$SHELL_CHOICE" = "zsh" ]; then
        echo -e "  ${DIM}ZSH Configuration:${NC} $USER_HOME/.zshrc"
    else
        echo -e "  ${DIM}BASH Configuration:${NC} $USER_HOME/.bashrc"
    fi
    if [ -d "$USER_HOME/.local/share/blesh" ]; then
        echo -e "  ${DIM}ble.sh:${NC} $USER_HOME/.local/share/blesh"
    fi
    echo -e "  ${DIM}Log file:${NC} $LOG_FILE"
    echo -e "${YELLOW}Please log out and log back in to apply all changes${NC}"
    echo -e "${BOLD}${GREEN}╰──────────────────────────╯${NC}\n"
}

# Main execution flow
main() {
    print_banner
    check_root
    detect_os
    
    # Ask user to choose shell
    echo -e "${CYAN}Select the shell to configure:${NC}"
    echo -e "1) ${BOLD}Bash${NC} (with ble.sh)"
    echo -e "2) ${BOLD}Zsh${NC} (with Oh My Zsh)\n"
    read -p "Enter choice [1-2]: " shell_choice
    case $shell_choice in
        1)
            SHELL_CHOICE="bash"
            print_status "Shell Choice" "Bash"
            ;;
        2)
            SHELL_CHOICE="zsh"
            print_status "Shell Choice" "Zsh"
            ;;
        *)
            print_status "Shell Choice" "FAIL"
            echo -e "${RED}Invalid choice. Exiting.${NC}"
            exit 1
            ;;
    esac
    
    install_dependencies
    compile_and_install_fetch
    
    if [ "$SHELL_CHOICE" = "zsh" ]; then
        install_oh_my_zsh
        install_zsh_plugins
        configure_zsh
        change_shell
    else
        install_blesh
        configure_bash
    fi
    
    cleanup
    print_completion
}

# Run main function with logging
{
    main "$@"
} 2>&1 | tee -a "$LOG_FILE"

if [ $? -eq 0 ]; then
    clear
    echo -e "${GREEN}Installation completed successfully!${NC}"
    echo -e "${YELLOW}Please log out and log back in to see the changes.${NC}"
    sleep 2
else
    echo -e "${RED}Installation encountered issues. Check log: $LOG_FILE${NC}"
fi
